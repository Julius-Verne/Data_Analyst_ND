data(diamonds)
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
diamonds <- data(diamonds)
summary(diamonds)
summary(diamonds)
diamond <- data(diamonds)
summary(diamond)
data(diamonds)
data(diamonds)
summary(diamond)
data(diamonds)
summary(diamonds)
str(diamonds)
by(diamonds$color, diamonds$price, summary)
by(diamonds$price,diamonds$color, summary)
?diamonds
ggplot(aes(x = price), data = diamonds)
ggplot(aes(x = price), data = diamonds)
ggplot(aes(x = price), data = diamonds)+
geom_histogram()
ggplot(aes(x = price), data = diamonds)+
geom_histogram() +
scale_x_continuous()
ggplot(aes(x = price), data = diamonds)+
geom_histogram() +
scale_x_log10()
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 10) +
scale_x_log10()
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 10)
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 10)
summary(diamonds$price)
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 100)
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 100,color = 'black', fill = '#099DD9')
less <- diamonds$price <= 500
less <- diamonds$price < 500
summary(diamonds)
diamonds$less_500 <- ifelse(diamonds$price<500,TRUE,FALSE)
summary(diamonds$less_500)
diamonds$less_500 <- ifelse(diamonds$price<250,TRUE,FALSE)
summary(diamonds$less_500)
diamonds$less_500 <- ifelse(diamonds$price<250,TRUE,FALSE)
summary(diamonds$less_500)
diamonds$less_500 <- ifelse(diamonds$price>=15000,TRUE,FALSE)
summary(diamonds$less_500)
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 100,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
ggplot(aes(x = price), data = diamonds)+
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
summary(diamonds$price)
summary(diamonds)
diamonds$
ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Fair <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Good <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
V_Good <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Prem <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Fair <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Fair')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Good <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Good')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
V_Good <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Very Good')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Prem <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Premium')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
Ideal <- ggplot(aes(x = price), data = subset(diamonds, cut == 'Ideal')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000))
grid.arrange(Fair, Good, V_Good,Prem, Ideal, ncol=1)
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
grid.arrange(Fair, Good, V_Good,Prem, Ideal, ncol=1)
by(diamonds$price,diamonds$cut, summary)
ggplot(aes(x = price), data = subset(diamonds, cut == 'Ideal')) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000)) +
facet_wrap(~cut)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 50,color = 'black', fill = '#099DD9') +
scale_x_continuous(limits = c(0, 10000), breaks = seq(0, 10000, 1000)) +
facet_wrap(~cut)
#Load libraries
install.packages("GGally")
install.packages("scales")
install.packages("scales")
install.packages("memisc")
install.packages("scales")
install.packages("scales")
library(ggplot2)
library(dplyr)
library(scales)
library(GGally)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(scales)
library(GGally)
library(memisc)
data(diamonds)
library(ggplot2)
ggplot(db, aes(x = average_views))+
geom_histogram()+
xlim(0,
quantile(db$average_views, probs = 0.95))
##Import Libraries
library(ggplot2)
library(dplyr)
library(scales)
library(GGally)
library(memisc)
library(gridExtra)
library(forcats)
##Import Data
base <-read.csv("data/database.csv",stringsAsFactors=FALSE)
db <- subset(base,
select = c(full_name, birth_year, sex, country, continent,
occupation, industry, domain, article_languages,
page_views,average_views,
historical_popularity_index))
setwd("~/GitHub/Data_Analyst_ND/Lesson2-R/Project_II")
##Import Libraries
library(ggplot2)
library(dplyr)
library(scales)
library(GGally)
library(memisc)
library(gridExtra)
library(forcats)
##Import Data
base <-read.csv("data/database.csv",stringsAsFactors=FALSE)
db <- subset(base,
select = c(full_name, birth_year, sex, country, continent,
occupation, industry, domain, article_languages,
page_views,average_views,
historical_popularity_index))
db$birth_year <- as.numeric(db$birth_year)
db$hpi <- db$historical_popularity_index
db$sex <- as.factor(db$sex)
db$country <- as.factor(db$country)
db$continent <- as.factor(db$continent)
db$occupation <- as.factor(db$occupation)
db$industry <- as.factor(db$industry)
db$domain <- as.factor(db$domain)
summary(db)
str(db)
ggplot(db, aes(x = average_views))+
geom_histogram()+
xlim(0,
quantile(db$average_views, probs = 0.95))
ggplot(db, aes(x = average_views))+
geom_histogram()+
scale_x_log10()
ggplot(db, aes(x = average_views))+
geom_histogram()+
xlim(0,
quantile(db$average_views, probs = 0.95))
ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
ggplot(db, aes(x = average_views))+
geom_histogram()+
xlim(0,
quantile(db$average_views, probs = 0.95))
ggplot(db, aes(x = average_views))+
geom_histogram()+
scale_x_log10()
ggplot(db, aes(x = page_views))+
geom_histogram()+
scale_x_log10()
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 1000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 1000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram(  )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("Average # of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Average # of page views")
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram(  )+
ggtitle("Average # of Pageviews per Biography",
subtitle = "Log10 of Average Page Views per Biography") +
labs(y = "# of People", x = "Average # of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
ggplot(db, aes(x = hpi))+
geom_histogram(binwidth = 0.5)
p1 <- ggplot(db, aes(x=birth_year))+
geom_histogram(binwidth = 50)+
scale_x_continuous(breaks = seq(-5000,2000,500))+
ggtitle("Year of Birth", subtitle = "Complete dataset")+
labs(colour = "Cylinders", x = "Years", y = "# of People")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2)))
p2 <- ggplot(db, aes(x=birth_year))+
geom_histogram(binwidth = 25)+
ggtitle("Year of Birth", subtitle = "5% Quantile and Up")+
labs( x = "Years", y = "# of People")+
xlim(quantile(db$birth_year, probs = 0.05), 2050)
p2 <- ggplot(db, aes(x=birth_year))+
geom_histogram(binwidth = 25)+
ggtitle("Year of Birth", subtitle = "5% Quantile and Up")+
labs( x = "Years", y = "# of People")+
xlim(quantile(db$birth_year, probs = 0.05), 2050)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(gridExtra)
# Load the Data
base <-read.csv("data/database.csv", stringsAsFactors=FALSE)
db <- subset(base,
select = c(full_name, birth_year, sex, country, continent,
occupation, industry, domain, article_languages,
page_views,average_views,
historical_popularity_index))
db$birth_year <- as.numeric(as.character(db$birth_year))
db$sex <- as.factor(db$sex)
db$country <- as.factor(db$country)
db$continent <- as.factor(db$continent)
db$occupation <- as.factor(db$occupation)
db$industry <- as.factor(db$industry)
db$domain <- as.factor(db$domain)
db <-subset(db, !is.na(db$birth_year))
str(db)
summary(db)
p1 <- ggplot(db, aes(x=birth_year))+
geom_histogram(binwidth = 50)+
scale_x_continuous(breaks = seq(-5000,2000,500))+
ggtitle("Year of Birth", subtitle = "Complete dataset")+
labs(colour = "Cylinders", x = "Years", y = "# of People")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2)))
p2 <- ggplot(db, aes(x=birth_year))+
geom_histogram(binwidth = 25)+
ggtitle("Year of Birth", subtitle = "5% Quantile and Up")+
labs( x = "Years", y = "# of People")+
xlim( quantile(db$birth_year, probs = 0.05), 2050)
grid.arrange(p1,p2)
ggplot(db, aes(x=birth_year))+
geom_histogram(binwidth = 5)+
scale_x_continuous(breaks = seq(1800,2010,25)) +
ggtitle("Year of Birth", subtitle = "Births from 1800 to 2005")+
labs(colour = "Cylinders", x = "Years", y = "# of People")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2))) +
xlim(1800, 2010)
ggplot(db, aes(x= sex))+
geom_bar(aes(fill = sex))+
ggtitle("# of People By Sex",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2)))
ggplot(subset(db, continent != ""), aes(x = continent))+
geom_bar()+
ggtitle("# of People By Continent",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Continent")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2)))
ggplot(db, aes(x = hpi))+
geom_histogram(binwidth = 0.5)
ggplot(db, aes(x = historical_popularity_index))+
geom_histogram(binwidth = 0.5)
summary(db$historical_popularity_index)
p1 <- ggplot(db, aes(x = page_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "# of page views")+
xlim(0, quantile( db$page_views, probs = 0.75))
p2 <- ggplot(db, aes(x = page_views))+
geom_histogram( )+
ggtitle("# of Pageviews per Biography",
subtitle = "Log10 of Page Views per Biography") +
labs(y = "# of People", x = "# of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("Average # of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Average # of page views") +
quantile( db$average_views, probs = 0.75)
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("Average # of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Average # of page views") +
xlim(0, quantile( db$average_views, probs = 0.75))
p1 <- ggplot(db, aes(x = average_views))+
geom_histogram( binwidth = 5000 )+
ggtitle("Average # of Pageviews per Biography",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Average # of page views") +
xlim(0, quantile( db$average_views, probs = 0.75))
p2 <- ggplot(db, aes(x = average_views))+
geom_histogram(  )+
ggtitle("Average # of Pageviews per Biography",
subtitle = "Log10 of Average Page Views per Biography") +
labs(y = "# of People", x = "Average # of page views - Log10") +
scale_x_log10()
grid.arrange(p1, p2)
View(base)
str(base)
##Import Data
base <-read.csv("data/database.csv")
str(base)
ggplot(db, aes(x = industry))+
geom_bar()+
ggtitle("# of People By Industry",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Industry")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2)))+
theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust = 0.3))
ggplot(db, aes(x = domain))+
geom_bar()+
ggtitle("# of People By Domain",
subtitle = "Data Obtained from the Pantheon Dataset") +
labs(y = "# of People", x = "Domain")+
theme_minimal()+
theme_update(plot.title = element_text(size = rel(2)))+
theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust = 0.3))
